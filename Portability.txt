Building diskbench on cygwin / Windows XP

"-lrt" doesn't work - a Linux-ism?

struct timespec?

_disksize undefined (need to include disksize.o).  The function is defined as extern - is that correct?

randread.c: storage size of 'seed' isn't known (it's a "struct timeval")
	decimal constant is unsigned only in ISO C90

"make clean" on Cygwin should delete the ".exe" files!



Portability challenges for diskbench

Likely issues:
 - timing, especially high-precision timing (although milliseconds are probably adequate given that we're benchmarking mechanical storage devices)
 - synchronous I/O: as much as possible, we want to test the performance of the storage device, not the cacheing ability of the operating system.


Determining disk size:

"position = lseek(f, 0L, SEEK_END)" seems to work fine on Linux and NetBSD, but not on Mac OS X (it returns 0).
http://stackoverflow.com/questions/9073614/open-raw-disk-and-get-size-os-x

Determining physical sector size of disk:
On Linux, the BLK*SZGET ioctls don't quite seem to work.  I think they return filesystem-level block information, not physical medium info.  There is a libblkid that apparently fdisk uses (and that clearly gets it right).  "sudo apt-get install libblkid-dev" on Debian/Ubuntu.
On Mac OS X, the DKIOCGETBLOCKSIZE ioctl should be the one to use.


Printing values of "abstract" types:

The printf() function provides a number of format specifiers, which relate to machine-level types.
It seems that printing a value of a type such as off_t is essentially non-portable. :(
Some C standards mention a "z" format specifier, and also "j".  There are also type-specific macros, e.g. 
Another option may be to cast to the largest reasonable integer type (e.g. intmax_t or maybe unsigned long long) when passing the value to printf().
See:
https://www.securecoding.cert.org/confluence/display/seccode/INT15-C.+Use+intmax_t+or+uintmax_t+for+formatted+IO+on+programmer-defined+integer+types
http://www.embedded.com/electronics-blogs/programming-pointers/4007254/A-case-study-in-portability
http://stackoverflow.com/questions/1401526/use-printf-to-display-off-t-nlink-t-size-t-and-others
http://stackoverflow.com/questions/586928/how-should-i-print-types-like-off-t-and-size-t/587026#587026
and others...


Timing:

<time.h> defines timespec, which has components tv_sec and tv_nsec for seconds and nanoseconds respectively.
<bits/time.h> on Linux defines timeval, which has tv_sec and tv_usec for seconds and microseconds respectively.
Mac OS X has no clock_gettime(). Use mach_absolute_time() instead, and use the Mach timebase facility to convert to seconds.


Synchronous I/O:

O_DSYNC not available in Cygwin?
	open()ing a file with O_DSYNC means that write operations return when the data (but not necessarily the metadata) have been written.
	Note: I believe this may not be honoured on many ATA hard disk drives.

	NetBSD:	O_DSYNC:Y	O_DIRECT:Y	directio():

O_DIRECT
	NetBSD: Y
	Linux: 2.6.10 and later

O_SYNC
	Linux: Y
	Cygwin: Y

O_DSYNC
	Linux: Y, but is actually synonymous with O_SYNC (and O_RSYNC).
	Cygwin: N

Linux raw(8) interface: deprecated

Mac OS X: call fnctl() with F_NOCACHE


Ideally we would use O_DSYNC for the benchmarking programs, but the overhead of writing metadata and inode data is probably negligible.  It looks like O_SYNC will be appropriate.

For the "rewrite" program, we want to ensure the integrity of the rewritten data, so synchronous writes will be necessary there also.  O_DSYNC or O_SYNC?
